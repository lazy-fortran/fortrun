name: Tests

on:
  push:
    branches: [ main, develop, mlir ]
  pull_request:
    branches: [ main ]

jobs:
  test-linux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Cache FPM binary
      id: cache-fpm
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/fpm
        key: ${{ runner.os }}-fpm-0.12.0

    - name: Setup FPM
      if: steps.cache-fpm.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
        chmod +x fpm-0.12.0-linux-x86_64-gcc-12
        sudo mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm

    - name: Cache apt packages
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: gfortran lcov
        version: 1.0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Setup registry
      run: |
        mkdir -p $HOME/.config/fortran
        if [ -f registry.toml ]; then
          cp registry.toml $HOME/.config/fortran/
        fi

    - name: Cache FPM dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/fpm
          build/dependencies
        key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-deps-

    - name: Show compiler versions
      run: |
        gfortran --version
        fpm --version
        python3 --version

    - name: Install fortfront
      run: |
        echo "Installing fortfront..."
        git clone https://github.com/lazy-fortran/fortfront.git
        cd fortfront
        fpm install --profile release --prefix ~/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        # Verify installation
        ls -la ~/.local/bin/
        ~/.local/bin/fortfront --version || echo "fortfront version check failed"

    - name: Run all tests with coverage
      run: |
        fpm test --profile debug --flag '-cpp -fprofile-arcs -ftest-coverage -g'

    - name: Generate coverage report
      run: |
        # Debug: Show where coverage files are located
        echo "Coverage files (.gcda):"
        find . -name "*.gcda" | head -10
        echo "Coverage files (.gcno):"
        find . -name "*.gcno" | head -10

        # Generate coverage report with lcov
        lcov --capture --directory build/ --output-file coverage.info \
          --rc branch_coverage=1 \
          --ignore-errors inconsistent,mismatch

        # Remove unwanted files from coverage
        lcov --remove coverage.info \
          'build/dependencies/*' \
          'test/*' \
          '/usr/*' \
          --output-file coverage_filtered.info \
          --ignore-errors unused

        # Generate HTML report
        genhtml coverage_filtered.info --output-directory coverage_html \
          --branch-coverage \
          --legend

        # Convert lcov info to Cobertura XML for codecov
        # Ensure Python and pip are available
        python3 -m pip install --user lcov-cobertura
        python3 -m lcov_cobertura coverage_filtered.info -o coverage.xml

        # Debug: Show coverage.xml content
        echo "Coverage XML file size and first few lines:"
        ls -la coverage.xml
        head -10 coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          coverage_html/
          coverage.xml
          coverage.info
          coverage_filtered.info

    - name: Check coverage threshold
      run: |
        # Extract coverage percentage from XML
        coverage=$(grep -oP 'line-rate="\K[^"]+' coverage.xml | head -1)
        coverage_percent=$(echo "$coverage * 100" | bc -l | cut -d. -f1)

        echo "Total coverage: ${coverage_percent}%"

        # Fail if coverage drops below threshold
        # Currently set to 45% based on previous requirements
        if [ "$coverage_percent" -lt "45" ]; then
          echo "Coverage ${coverage_percent}% is below threshold of 45%"
          exit 1
        fi

  test-windows:
    runs-on: windows-latest
    timeout-minutes: 20

    steps:
    - uses: actions/checkout@v4

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: false
        path-type: inherit
        install: >-
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-gcc
          git

    - name: Add MinGW to PATH
      run: |
        echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh

    - name: Install FPM
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-windows-x86_64-gcc-12.exe" -OutFile "fpm.exe"
        Move-Item -Path "fpm.exe" -Destination "C:\msys64\mingw64\bin\fpm.exe"
        & "C:\msys64\mingw64\bin\fpm.exe" --version

    - name: Setup registry
      shell: msys2 {0}
      run: |
        mkdir -p $HOME/.config/fortran
        if [ -f registry.toml ]; then
          cp registry.toml $HOME/.config/fortran/
        fi

    - name: Install fortfront (required dependency)
      shell: msys2 {0}
      timeout-minutes: 10
      run: |
        echo "Installing fortfront..."
        git clone https://github.com/lazy-fortran/fortfront.git
        cd fortfront
        fpm install --profile release --prefix ~/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        ~/.local/bin/fortfront --version || echo "fortfront version check failed"

    - name: Run all tests
      shell: msys2 {0}
      timeout-minutes: 15
      run: |
        fpm test --flag '-cpp'

  test-macos:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Micromamba
      uses: mamba-org/setup-micromamba@v2
      with:
        micromamba-version: 'latest'
        environment-name: test-env
        create-args: >-
          -c conda-forge
          python=3.11
          fpm
          gfortran
        init-shell: bash
        cache-environment: true

    - name: Setup registry
      shell: bash -el {0}
      run: |
        mkdir -p $HOME/.config/fortran
        if [ -f registry.toml ]; then
          cp registry.toml $HOME/.config/fortran/
        fi

    - name: Cache FPM dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/fpm
          build/dependencies
        key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-deps-

    - name: Install fortfront
      shell: bash -el {0}
      run: |
        echo "Installing fortfront..."
        git clone https://github.com/lazy-fortran/fortfront.git
        cd fortfront
        fpm install --profile release --prefix ~/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        # Verify installation
        ls -la ~/.local/bin/
        ~/.local/bin/fortfront --version || echo "fortfront version check failed"

    - name: Run all tests
      shell: bash -el {0}
      run: |
        # Workaround for FPM/GCC compatibility
        if command -v gcc-15 &> /dev/null; then
          export FPM_CC=gcc-15
          export FPM_FC=gfortran
        elif command -v gcc-14 &> /dev/null; then
          export FPM_CC=gcc-14
          export FPM_FC=gfortran
        elif command -v gcc-13 &> /dev/null; then
          export FPM_CC=gcc-13
          export FPM_FC=gfortran
        else
          GCC_PATH=$(which gcc)
          if [ -n "$GCC_PATH" ]; then
            export FPM_CC=$GCC_PATH
            export FPM_FC=gfortran
          fi
        fi

        fpm test --flag '-cpp'
